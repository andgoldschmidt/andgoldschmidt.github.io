<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Andy Goldschmidt</title>
    <link>https://andgoldschmidt.github.io/</link>
      <atom:link href="https://andgoldschmidt.github.io/index.xml" rel="self" type="application/rss+xml" />
    <description>Andy Goldschmidt</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>© 2021 Andy Goldschmidt</copyright><lastBuildDate>Sat, 01 Jun 2030 13:00:00 +0000</lastBuildDate>
    <image>
      <url>https://andgoldschmidt.github.io/media/icon_hufbcf978b363d0f47c9794b839e91d566_21519_512x512_fill_lanczos_center_3.png</url>
      <title>Andy Goldschmidt</title>
      <link>https://andgoldschmidt.github.io/</link>
    </image>
    
    <item>
      <title>Example Talk</title>
      <link>https://andgoldschmidt.github.io/slides/example/</link>
      <pubDate>Sat, 01 Jun 2030 13:00:00 +0000</pubDate>
      <guid>https://andgoldschmidt.github.io/slides/example/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click on the &lt;strong&gt;Slides&lt;/strong&gt; button above to view the built-in slides feature.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Slides can be added in a few ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Create&lt;/strong&gt; slides using Wowchemy&amp;rsquo;s &lt;a href=&#34;https://wowchemy.com/docs/managing-content/#create-slides&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;Slides&lt;/em&gt;&lt;/a&gt; feature and link using &lt;code&gt;slides&lt;/code&gt; parameter in the front matter of the talk file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Upload&lt;/strong&gt; an existing slide deck to &lt;code&gt;static/&lt;/code&gt; and link using &lt;code&gt;url_slides&lt;/code&gt; parameter in the front matter of the talk file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Embed&lt;/strong&gt; your slides (e.g. Google Slides) or presentation video on this page using &lt;a href=&#34;https://wowchemy.com/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;shortcodes&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Further event details, including &lt;a href=&#34;https://wowchemy.com/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;page elements&lt;/a&gt; such as image galleries, can be added to the body of this page.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>(Talk) Bilinear Dynamic Mode Decomposition for Quantum Control at MMLDT-CSET</title>
      <link>https://andgoldschmidt.github.io/talk/talk-bilinear-dynamic-mode-decomposition-for-quantum-control-at-mmldt-cset/</link>
      <pubDate>Sun, 26 Sep 2021 00:00:00 +0000</pubDate>
      <guid>https://andgoldschmidt.github.io/talk/talk-bilinear-dynamic-mode-decomposition-for-quantum-control-at-mmldt-cset/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Bilinear dynamic mode decomposition for quantum control</title>
      <link>https://andgoldschmidt.github.io/publication/bidmd/</link>
      <pubDate>Mon, 22 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://andgoldschmidt.github.io/publication/bidmd/</guid>
      <description>&lt;!-- 
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Cite&lt;/em&gt; button above to demo the feature to enable visitors to import publication metadata into their reference management software.
  &lt;/div&gt;
&lt;/div&gt;
 --&gt;
&lt;!-- &lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Create your slides in Markdown - click the &lt;em&gt;Slides&lt;/em&gt; button to check out the example.
  &lt;/div&gt;
&lt;/div&gt;
 --&gt;
&lt;p&gt;&lt;strong&gt;Caption for the figure:&lt;/strong&gt; The trajectory of a qubit driven by a linearly-polarized semi-classical drive $\textrm{u}(t)$ (Hamiltonian: $H(t) = \pi \sigma_z + \textrm{u}(t) \sigma_x$) is shown on the Bloch sphere in (a). The corresponding Pauli-spin measurements are shown in (b). Measurements $\mathbf{x}_j$, $j=1,2,\dots$, are taken at discrete time steps and assembled into offset snapshot matrices $\mathbf{X}$ and $\mathbf{X}&#39;$ in (c). The bilinear Dynamic Mode Decomposition (d) is a regression-based algorithm that uses the assembled data matrices and control input from sufficiently-resolved data to learn the intrinsic dynamics, $\mathbf{A}$ and the control, $\mathbf{B}$, for the bilinear dynamics.&lt;/p&gt;
&lt;!-- Supplementary notes can be added here, including [code, math, and images](https://wowchemy.com/docs/writing-markdown-latex/). --&gt;
</description>
    </item>
    
    <item>
      <title>(Organizer) Data-Driven Methods for Quantum Dynamics and Control at SIAM CSE</title>
      <link>https://andgoldschmidt.github.io/talk/organizer-data-driven-methods-for-quantum-dynamics-and-control-at-siam-cse/</link>
      <pubDate>Mon, 01 Mar 2021 12:00:00 +0000</pubDate>
      <guid>https://andgoldschmidt.github.io/talk/organizer-data-driven-methods-for-quantum-dynamics-and-control-at-siam-cse/</guid>
      <description>&lt;h2 id=&#34;session-1&#34;&gt;Session 1&lt;/h2&gt;
&lt;body&gt;
&lt;dl&gt;
	&lt;dt&gt;
	&lt;strong&gt;
	9:45-10:00 Calibrating Quantum Hardware with Online Optimal Control&lt;/strong&gt; 
    &lt;a href=&#34;dsp_talk.cfm?p=109256&#34;&gt;abstract&lt;/a&gt;
	&lt;/dt&gt;&lt;dd&gt; &lt;em&gt; Jonathan L. Dubois&lt;/em&gt;, Lawrence Livermore National Laboratory, U.S. 
	&lt;/dd&gt;&lt;dt&gt;
	&lt;strong&gt;
	10:05-10:20 Bilinear Dynamic Mode Decomposition for Quantum Control&lt;/strong&gt; 
    &lt;a href=&#34;dsp_talk.cfm?p=109258&#34;&gt;abstract&lt;/a&gt;
	&lt;/dt&gt;&lt;dd&gt; &lt;em&gt; Andy Goldschmidt&lt;/em&gt; and
								Eurika Kaiser, University of Washington, U.S.; Jonathan L. Dubois, Lawrence Livermore National Laboratory, U.S.; Steve Brunton, University of Washington, U.S.; J. Nathan Kutz, University of Washington, Seattle, U.S. 
	&lt;/dd&gt;&lt;dt&gt;
	&lt;strong&gt;
	10:25-10:40 Designing High-Fidelity Controls on Real Quantum Systems using&amp;nbsp;System&amp;nbsp;Identification and Reinforcement Learning&lt;/strong&gt; 
    &lt;a href=&#34;dsp_talk.cfm?p=109264&#34;&gt;abstract&lt;/a&gt;
	&lt;/dt&gt;&lt;dd&gt; &lt;em&gt; Michael J. Biercuk&lt;/em&gt;, University of Sydney, Australia; Harrison Ball, Q-CTRL, Australia; Yuval Baum, California Institute of Technology, U.S.; Andre Carvalho, Griffith University, Brisbane, Australia; Leonardo de Castro,
								Sean Howell,
								Michael Hush, and
								Per Liebermann, Q-CTRL, Australia; Pranav Mundada, Princeton University, U.S.; Felix Thomsen, Q-CTRL, Australia 
	&lt;/dd&gt;&lt;dt&gt;
	&lt;strong&gt;
	10:45-11:00 Quantum System Compression: A Hamiltonian Guided Walk through Hilbert Space&lt;/strong&gt; 
    &lt;a href=&#34;dsp_talk.cfm?p=109702&#34;&gt;abstract&lt;/a&gt;
	&lt;/dt&gt;&lt;dd&gt; &lt;em&gt; Robert L. Kosut&lt;/em&gt;, SC Solutions, U.S.; Herschel Rabitz and
								Tak-San Ho, Princeton University, U.S. 
	&lt;/dd&gt;&lt;dt&gt;
	&lt;strong&gt;
	11:05-11:20 Learning the States of Quantum Dot Systems: A Ray-Based Framework&lt;/strong&gt; 
    &lt;a href=&#34;dsp_talk.cfm?p=109703&#34;&gt;abstract&lt;/a&gt;
	&lt;/dt&gt;&lt;dd&gt; &lt;em&gt; Justyna Zwolak&lt;/em&gt;, National Institute of Standards and Technology, U.S. 
	&lt;/dd&gt;&lt;/dl&gt;
&lt;/body&gt;
&lt;h2 id=&#34;session-2&#34;&gt;Session 2&lt;/h2&gt;
&lt;body&gt;
&lt;dl&gt;
	&lt;dt&gt;
	&lt;strong&gt;
	2:15-2:30 A General Theory of Randomized Benchmarking&lt;/strong&gt;   
    &lt;a href=&#34;dsp_talk.cfm?p=109705&#34;&gt;abstract&lt;/a&gt;
	&lt;/dt&gt;&lt;dd&gt; &lt;em&gt; Jens Eisert&lt;/em&gt;, Freie Universität Berlin, Germany; Jonas Helsen, University of Amsterdam, Netherlands; Ingo Roth, Freie Universität Berlin, Germany; Emilio Onorati, University College London, United Kingdom; Albert H. Werner, University of Copenhagen, Denmark 
	&lt;/dd&gt;&lt;dt&gt;
	&lt;strong&gt;
	2:35-2:50 Operational, Gauge-Free Quantum Tomography&lt;/strong&gt; 
    &lt;a href=&#34;dsp_talk.cfm?p=109706&#34;&gt;abstract&lt;/a&gt;
	&lt;/dt&gt;&lt;dd&gt; &lt;em&gt; Olivia Di Matteo&lt;/em&gt;, TRIUMF, Canada; John Gamble and
								Chris Granade, Microsoft Research, U.S.; Kenneth Rudinger, Sandia National Laboratories, U.S.; Nathan O. Wiebe, University of Washington, U.S. 
	&lt;/dd&gt;&lt;dt&gt;
	&lt;strong&gt;
	2:55-3:10 Linear Preservers on Infinitely Divisible Matrices through Separability&lt;/strong&gt; 
    &lt;a href=&#34;dsp_talk.cfm?p=109941&#34;&gt;abstract&lt;/a&gt;
	&lt;/dt&gt;&lt;dd&gt; &lt;em&gt; Indu L&lt;/em&gt; and
								Jill K Mathew, Mar Ivanios College, Trivandrum, Kerala, India 
	&lt;/dd&gt;&lt;dt&gt;
	&lt;strong&gt;
	3:15-3:30 Machine Learning for Quantum States&lt;/strong&gt; 
    &lt;a href=&#34;dsp_talk.cfm?p=109708&#34;&gt;abstract&lt;/a&gt;
	&lt;/dt&gt;&lt;dd&gt; &lt;em&gt; Giuseppe Carleo&lt;/em&gt;, EPFL, Switzerland 
	&lt;/dd&gt;&lt;dt&gt;
	&lt;strong&gt;
	3:35-3:50 Learning Models of Quantum Systems from Experiments&lt;/strong&gt; 
    &lt;a href=&#34;dsp_talk.cfm?p=109710&#34;&gt;abstract&lt;/a&gt;
	&lt;/dt&gt;&lt;dd&gt; Antonio Gentile and
								Brian Flynn, University of Bristol, United Kingdom; Sebastian Knauer, University of Vienna, Austria; &lt;em&gt; Nathan O. Wiebe&lt;/em&gt;, University of Washington, U.S.; Stefano Paesani, University of Bristol, United Kingdom; Chris Granade, Microsoft Research, U.S.; John Rarity,
								Raffaele Santagati, and
								Anthony Laing, University of Bristol, United Kingdom 
	&lt;/dd&gt;&lt;/dl&gt;
&lt;/body&gt;
</description>
    </item>
    
    <item>
      <title>Welcome to Wowchemy, the website builder for Hugo</title>
      <link>https://andgoldschmidt.github.io/post/getting-started/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://andgoldschmidt.github.io/post/getting-started/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;The Wowchemy website builder for Hugo, along with its starter templates, is designed for professional creators, educators, and teams/organizations - although it can be used to create any kind of site&lt;/li&gt;
&lt;li&gt;The template can be modified and customised to suit your needs. It&amp;rsquo;s a good platform for anyone looking to take control of their data and online identity whilst having the convenience to start off with a &lt;strong&gt;no-code solution (write in Markdown and customize with YAML parameters)&lt;/strong&gt; and having &lt;strong&gt;flexibility to later add even deeper personalization with HTML and CSS&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;You can work with all your favourite tools and apps with hundreds of plugins and integrations to speed up your workflows, interact with your readers, and much more&lt;/li&gt;
&lt;/ol&gt;














&lt;figure  id=&#34;figure-the-template-is-mobile-first-with-a-responsive-design-to-ensure-that-your-site-looks-stunning-on-every-device&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://raw.githubusercontent.com/wowchemy/wowchemy-hugo-modules/master/academic.png&#34; alt=&#34;The template is mobile first with a responsive design to ensure that your site looks stunning on every device.&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      The template is mobile first with a responsive design to ensure that your site looks stunning on every device.
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;h2 id=&#34;get-started&#34;&gt;Get Started&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;👉 &lt;a href=&#34;https://wowchemy.com/templates/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Create a new site&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;📚 &lt;a href=&#34;https://wowchemy.com/docs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Personalize your site&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;💬 &lt;a href=&#34;https://discord.gg/z8wNYzb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Chat with the &lt;strong&gt;Wowchemy community&lt;/strong&gt;&lt;/a&gt; or &lt;a href=&#34;https://discourse.gohugo.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Hugo community&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;🐦 Twitter: &lt;a href=&#34;https://twitter.com/wowchemy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@wowchemy&lt;/a&gt; &lt;a href=&#34;https://twitter.com/GeorgeCushen&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@GeorgeCushen&lt;/a&gt; &lt;a href=&#34;https://twitter.com/search?q=%28%23MadeWithWowchemy%20OR%20%23MadeWithAcademic%29&amp;amp;src=typed_query&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;#MadeWithWowchemy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;💡 &lt;a href=&#34;https://github.com/wowchemy/wowchemy-hugo-modules/issues&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Request a &lt;strong&gt;feature&lt;/strong&gt; or report a &lt;strong&gt;bug&lt;/strong&gt; for &lt;em&gt;Wowchemy&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;⬆️ &lt;strong&gt;Updating Wowchemy?&lt;/strong&gt; View the &lt;a href=&#34;https://wowchemy.com/docs/hugo-tutorials/update/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Update Tutorial&lt;/a&gt; and &lt;a href=&#34;https://wowchemy.com/updates/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Release Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;crowd-funded-open-source-software&#34;&gt;Crowd-funded open-source software&lt;/h2&gt;
&lt;p&gt;To help us develop this template and software sustainably under the MIT license, we ask all individuals and businesses that use it to help support its ongoing maintenance and development via sponsorship.&lt;/p&gt;
&lt;h3 id=&#34;-click-here-to-become-a-sponsor-and-help-support-wowchemys-future-httpswowchemycomplans&#34;&gt;&lt;a href=&#34;https://wowchemy.com/plans/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;❤️ Click here to become a sponsor and help support Wowchemy&amp;rsquo;s future ❤️&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As a token of appreciation for sponsoring, you can &lt;strong&gt;unlock &lt;a href=&#34;https://wowchemy.com/plans/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;these&lt;/a&gt; awesome rewards and extra features 🦄✨&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;ecosystem&#34;&gt;Ecosystem&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/wowchemy/hugo-academic-cli&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hugo Academic CLI&lt;/a&gt;:&lt;/strong&gt; Automatically import publications from BibTeX&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;inspiration&#34;&gt;Inspiration&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://academic-demo.netlify.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Check out the latest &lt;strong&gt;demo&lt;/strong&gt;&lt;/a&gt; of what you&amp;rsquo;ll get in less than 10 minutes, or &lt;a href=&#34;https://wowchemy.com/user-stories/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;view the &lt;strong&gt;showcase&lt;/strong&gt;&lt;/a&gt; of personal, project, and business sites.&lt;/p&gt;
&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Page builder&lt;/strong&gt; - Create &lt;em&gt;anything&lt;/em&gt; with &lt;a href=&#34;https://wowchemy.com/docs/page-builder/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;widgets&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://wowchemy.com/docs/content/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;elements&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Edit any type of content&lt;/strong&gt; - Blog posts, publications, talks, slides, projects, and more!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Create content&lt;/strong&gt; in &lt;a href=&#34;https://wowchemy.com/docs/content/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Markdown&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;https://wowchemy.com/docs/import/jupyter/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Jupyter&lt;/strong&gt;&lt;/a&gt;, or &lt;a href=&#34;https://wowchemy.com/docs/install-locally/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;RStudio&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Plugin System&lt;/strong&gt; - Fully customizable &lt;a href=&#34;https://wowchemy.com/docs/customization/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;color&lt;/strong&gt; and &lt;strong&gt;font themes&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Display Code and Math&lt;/strong&gt; - Code highlighting and &lt;a href=&#34;https://en.wikibooks.org/wiki/LaTeX/Mathematics&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LaTeX math&lt;/a&gt; supported&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integrations&lt;/strong&gt; - &lt;a href=&#34;https://analytics.google.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google Analytics&lt;/a&gt;, &lt;a href=&#34;https://disqus.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Disqus commenting&lt;/a&gt;, Maps, Contact Forms, and more!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Beautiful Site&lt;/strong&gt; - Simple and refreshing one page design&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Industry-Leading SEO&lt;/strong&gt; - Help get your website found on search engines and social media&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Media Galleries&lt;/strong&gt; - Display your images and videos with captions in a customizable gallery&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mobile Friendly&lt;/strong&gt; - Look amazing on every screen with a mobile friendly version of your site&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multi-language&lt;/strong&gt; - 34+ language packs including English, 中文, and Português&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multi-user&lt;/strong&gt; - Each author gets their own profile page&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Privacy Pack&lt;/strong&gt; - Assists with GDPR&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stand Out&lt;/strong&gt; - Bring your site to life with animation, parallax backgrounds, and scroll effects&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;One-Click Deployment&lt;/strong&gt; - No servers. No databases. Only files.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;themes&#34;&gt;Themes&lt;/h2&gt;
&lt;p&gt;Wowchemy and its templates come with &lt;strong&gt;automatic day (light) and night (dark) mode&lt;/strong&gt; built-in. Alternatively, visitors can choose their preferred mode - click the moon icon in the top right of the &lt;a href=&#34;https://academic-demo.netlify.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Demo&lt;/a&gt; to see it in action! Day/night mode can also be disabled by the site admin in &lt;code&gt;params.toml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://wowchemy.com/docs/customization&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Choose a stunning &lt;strong&gt;theme&lt;/strong&gt; and &lt;strong&gt;font&lt;/strong&gt;&lt;/a&gt; for your site. Themes are fully customizable.&lt;/p&gt;
&lt;h2 id=&#34;license&#34;&gt;License&lt;/h2&gt;
&lt;p&gt;Copyright 2016-present &lt;a href=&#34;https://georgecushen.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;George Cushen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Released under the &lt;a href=&#34;https://github.com/wowchemy/wowchemy-hugo-modules/blob/master/LICENSE.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MIT&lt;/a&gt; license.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Derivative</title>
      <link>https://andgoldschmidt.github.io/project/derivative/</link>
      <pubDate>Wed, 07 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://andgoldschmidt.github.io/project/derivative/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Derivative&lt;/strong&gt; is an open-source project I started in 2019-2020 that turned into a collaboration with Markus Quade (Github, &lt;a href=&#34;https://github.com/Ohjeah&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@Ohjeah&lt;/a&gt;) and Brian de Silva (Github, &lt;a href=&#34;https://github.com/briandesilva&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@briandesilva&lt;/a&gt;). It is a standalone suite of numerical differentiation methods for noisy time series data written in Python.&lt;/p&gt;
&lt;p&gt;The goal is to provide some common numerical differentiation techniques that showcase improvements that can be made on finite differences when data is noisy. The package binds these common differentiation methods to a single easily implemented differentiation interface to encourage user adaptation.&lt;/p&gt;
&lt;p&gt;Derivative is a contribution to &lt;a href=&#34;https://github.com/dynamicslab/pysindy/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PySINDy&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;&lt;tr&gt;
&lt;td&gt; &lt;a href=&#34;https://zenodo.org/badge/latestdoi/186055899&#34;&gt;&lt;img src=&#34;https://zenodo.org/badge/186055899.svg&#34; style=&#34;width: 200px;&#34; alt=&#34;DOI&#34;&gt; &lt;/a&gt; &lt;/td&gt; 
&lt;td&gt; &lt;a href=&#34;https://pysindy.readthedocs.io/en/latest/?badge=latest&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/pysindy/badge/?version=latest&#34; style=&#34;width: 100px;&#34; alt=&#34;Documentation Status&#34;&gt; &lt;/a&gt; &lt;/td&gt; 
&lt;td&gt; &lt;a href=&#34;https://github.com/dynamicslab/pysindy/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/dynamicslab/pysindy.svg?style=social&amp;label=Star&amp;maxAge=2592000&#34; style=&#34;width: 100px;&#34; alt=&#34;GitHub stars&#34;&gt; &lt;/a&gt; &lt;/td&gt; 
&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;PySINDy is an open source Python package for the Sparse Identification of Nonlinear Dynamical systems (SINDy).&lt;/p&gt;
&lt;p&gt;At some point, I&amp;rsquo;ll write a post about my version of total variational regularization (see the figure above). I adapted a technique from &lt;em&gt;The solution path of the generalized lasso&lt;/em&gt; (&lt;a href=&#34;https://projecteuclid.org/journals/annals-of-statistics/volume-39/issue-3/The-solution-path-of-the-generalized-lasso/10.1214/11-AOS878.full&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DOI: 10.1214/11-AOS878&lt;/a&gt;) by R.J. Tibshirani &amp;amp; J. Taylor to write a nice variation of the classic algorithm in &lt;em&gt;Numerical Differentiation of Noisy, Nonsmooth Data&lt;/em&gt; (&lt;a href=&#34;https://doi.org/10.5402/2011/164564&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DOI: 10.5402/2011/164564&lt;/a&gt;) by Rick Chartrand.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hierarchical Clustering with Prototypes</title>
      <link>https://andgoldschmidt.github.io/project/pyprotoclust/</link>
      <pubDate>Sun, 26 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://andgoldschmidt.github.io/project/pyprotoclust/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Pyprotoclust&lt;/strong&gt; is an implementatin of representative hierarchical clustering using minimax linkage. The original algorithm is from &lt;em&gt;Hierarchical Clustering With Prototypes via Minimax Linkage&lt;/em&gt; (&lt;a href=&#34;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4527350/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DOI: 10.1198/jasa.2011.tm10183&lt;/a&gt;) by J. Bien and R. Tibshirani; Pyprotoclust takes a distance matrix as input. It returns a linkage matrix encoding the hierachical clustering as well as an additional list labelling the prototypes associated with each clustering.&lt;/p&gt;
&lt;p&gt;I coded up a fun example inspired by the original paper where I apply the algorithm to determine representative pictures for the Olivetti Faces dataset. It can be found &lt;a href=&#34;https://pyprotoclust.readthedocs.io/en/latest/notebooks/Example.html#Olivetti-Faces&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;in the Pyprotoclust documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Figure&lt;/strong&gt;: (Left) A dendrogram of the hierarchical clustering example with a dashed line at the example cut height. (Right) A scatter plot of the example with circles centered at prototypes drawn with radii equal to the top-level linkage heights of each cluster.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python package development</title>
      <link>https://andgoldschmidt.github.io/project/poetry/</link>
      <pubDate>Sat, 16 May 2020 00:00:00 +0000</pubDate>
      <guid>https://andgoldschmidt.github.io/project/poetry/</guid>
      <description>&lt;p&gt;There are lots of features that go into packaging up Python code for other users. How can we make a project that ships easily to users and takes advantage of our normal development tools? We&amp;rsquo;ll discuss:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Poetry: for easily making and publishing a package&lt;/li&gt;
&lt;li&gt;Sphinx: for making documentation&lt;/li&gt;
&lt;li&gt;Readthedocs: free professional-looking documenation hosting and formatting&lt;/li&gt;
&lt;li&gt;PyCharm: the default Python IDE (you can get the professional version as a student)&lt;/li&gt;
&lt;li&gt;PyPI: Python pacakge index, where you store stuff that people can pip install.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;basics&#34;&gt;Basics&lt;/h2&gt;
&lt;p&gt;Read the &lt;a href=&#34;https://python-poetry.org/docs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Poetry docs&lt;/a&gt; to install. It&amp;rsquo;s good documentation; you should skim the Installation and Basic Usage first. For zsh users, make sure Poetry got added to your Path inside zshrc. For bash people, it&amp;rsquo;s automatic.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s make a new project with Poetry.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a python project. (See &lt;em&gt;Choosing a project name&lt;/em&gt; below this list.)
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;poetry new myproject
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Change to this directory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Start the poetry virtual environment.
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;poetry shell
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will make a virtual environment that is like a fresh Python installation for us to be explicit about our package&amp;rsquo;s dependencies.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Install new pacakges as needed.
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;poetry add python_package
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The name python_pacakge would be something like numpy. Poetry will install the package to the virtual environment and add the package to the pyproject.toml file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Take a look at the pyproject.toml file. All your package settings are here. Any added pacakges appear automatically. We also have a file not for human consumption called poetry.lock which does all the work of building the exact environement we are using. It can be good to commit this poetry.lock to version control so someone interacting with our package knows the exact packages we were using.&lt;/li&gt;
&lt;li&gt;To update all pacakges added with &lt;em&gt;poetry add&lt;/em&gt;, run &lt;em&gt;poetry update&lt;/em&gt;. To install the current system and update the poetry.lock file, run &lt;em&gt;poetry install&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;choosing-a-project-name&#34;&gt;Choosing a project name&lt;/h3&gt;
&lt;p&gt;A new poetry project ``myproject&#39;&#39; has a specific directory structure:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    myproject
    |-- pyproject.toml
    |-- README.rst
    |-- myproject
    |   |-- __init__.py
    |-- tests
        |-- __init__.py
        |-- test_myproject.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The project name is for the top level directory of the project. This is the name of the github repository and the PyPI project so it is invoked with &lt;code&gt;pip install myprojectname&lt;/code&gt;. It should be unique. Project names on PyPI should NOT use dashes (&lt;a href=&#34;https://stackoverflow.com/questions/8350853/%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://stackoverflow.com/questions/8350853/)&lt;/a&gt;. Underscores are allowed but discouraged. The package or module name is the inner directory containing __init__.py. This is the code that will be invoked by the user as &lt;em&gt;import my_project_name&lt;/em&gt; in code. It does not have to be unique. It can use underscores.Note that Poetry defaults to matching project and package names. This is also the Python style guideline (PEP 423).&lt;/p&gt;
&lt;h3 id=&#34;version-control&#34;&gt;Version control&lt;/h3&gt;
&lt;p&gt;Now we start tracking our new package on version control. Init a git repo in the project directory. Do this in your usual way. (e.g. hosting on github). The splash page for your package will be README.rst! Make it pretty.&lt;/p&gt;
&lt;h3 id=&#34;pycharm&#34;&gt;PyCharm&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s use a modern IDE. Open up the project in PyCharm.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Get the location of the interpreter for this virtual environment for PyCharm. Run this command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;poetry run which python
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make the virtual environment default for PyCharm.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Settings $\rightarrow$ Project $\rightarrow$ Python Interpreter&lt;/li&gt;
&lt;li&gt;Click the gear, and select add.&lt;/li&gt;
&lt;li&gt;Choose the option \textit{existing environment} and add the path to the poetry virtual environment. Apply changes.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now PyCharm will complain when you try to use python code you haven&amp;rsquo;t added. PyCharm will also give you actions to import missing libraries. However, be sure to add the python libraries with poetry, not PyCharm.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;add-documentation-with-sphinx&#34;&gt;Add documentation with Sphinx&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s set up Sphinx.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Start&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir docs
poetry add sphinx
cd docs
sphinx-quickstart
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The command line will prompt you with a few questions. Use the default settings, but enter any project-specific information as needed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All Sphinx settings are in conf.py. The first setting to edit is the path. Uncomment the lines:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import os
import sys
sys.path.insert(0, os.path.abspath(&#39;.&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and change the &amp;ldquo;.&amp;rdquo; to &amp;ldquo;..&amp;rdquo; to reflect the docs folder.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make sure that Sphinx knows that the main file is index.rst by adding the lines&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Assign the master document
master_doc = &#39;index&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to conf.py.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Test to see that your docs compile. Run the command&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;make html
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;inside the docs folder then open up index.html in your web browser.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add docs to readthedocs.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to &lt;a href=&#34;https://readthedocs.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;readthedocs&lt;/a&gt;, login, then find and click import.&lt;/li&gt;
&lt;li&gt;Paste the link to the github repo and create.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Readthedocs will find the conf.py file and build the documentation.&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Check that github will let readthedocs know when the documentation is updated. Go to the project repo settings and confirm that the Webhooks tab includes readthedocs.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;Note:
Oddly, the default Poetry config section tool.poetry.dependencies that allows users of your package to avoid installing development tools like Sphinx is not supported by readthedocs (the listed packages won&amp;rsquo;t be used). There is an alternative, e.g.&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sphinx = {version=&amp;quot;^3.0.2&amp;quot;, optional = true}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;To add packages to Poetry as optional you can call poetry add sphinx &amp;ndash;optional to autofill this format.
In your .readthedocs.yaml file, you can make sure these packages are installed by adding the extra_name parameter to extra_requirements, e.g.:&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python:
    version: 3.7
    install:
    - method: pip
        path: .
        extra_requirements:
        - docs
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;publish-the-package-on-pypi&#34;&gt;Publish the package on PyPI&lt;/h3&gt;
&lt;p&gt;This is as easy as &lt;code&gt;poetry publish&lt;/code&gt;! First, we&amp;rsquo;ll have to setup our PyPI whic we can do by &lt;a href=&#34;https://python-poetry.org/docs/repositories/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;following the Poetry documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;additional-tasks&#34;&gt;Additional tasks&lt;/h2&gt;
&lt;p&gt;Sphinx can automatically generate documentation for the modules, classes, and functions that have properly formatted docstrings. There are two main docstring styles: NumPy and Google. I use Google&amp;rsquo;s docstring format becaues it takes up less vertical space. The essential Sphinx extensions are autodoc (for automatically making docstrings into reStructuredText) and napoleon (for docstring formats). Both should be added to the Sphinx conf.py file as extensions,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;extensions = [&#39;sphinx.ext.autodoc&#39;,&#39;sphinx.ext.napoleon&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No installation by Poetry is necessary because both are part of the base installation of Sphinx.&lt;/p&gt;
&lt;p&gt;A common point of troubleshooting is that the readthedocs servers do not have your desired library installed. You will need to go to Advanced Settings on readthedocs and make sure you select to use both&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Markdown&#34;&gt;Install Project
    Install your project inside a venv using setup.py install

Use system packages
    Give the venv access to the global site packages dir
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Technically, you may only need the second option to get e.g. numpy which readthedocs has installed on their servers for you. But if you want a more advanced option like sklearn that isn&amp;rsquo;t on the default servers, you&amp;rsquo;ll need to install the project. This means you need one more file at the top level of your project called .readthedocs.yaml which looks something like&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-TOML&#34;&gt;    version: 2

    build:
      image: latest
    
    python:
      version: 3.7
      install:
        - method: pip
          path: .
          extra_requirements:
            - docs
    
    sphinx:
      configuration: docs/conf.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This file makes sure that the setup.py command (the old package tool) interacts with the poetry configuration files correctly. Currently, there are some changes to python standards moving in poetry&amp;rsquo;s direction, but these are not implemented in readthedocs yet. Hence, this extra file.&lt;/p&gt;
&lt;h3 id=&#34;adding-jupyter-notebooks-to-the-docs&#34;&gt;Adding Jupyter notebooks to the docs&lt;/h3&gt;
&lt;p&gt;The key tool here is nbsphinx. This will need to be installed by poetry. Also, an ipython kernel and a jupyter reader will need to be installed for readthedocs to run the notebook (explicitely, &lt;code&gt;poetry add ipykernel&lt;/code&gt; and &lt;code&gt;poetry add jupyter_client&lt;/code&gt;. You can make these optional. You will also need the .readthedocs.yaml file so see the note at the end of the autodoc section.&lt;/p&gt;
&lt;h3 id=&#34;adding-a-license&#34;&gt;Adding a LICENSE&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Create a file in docs called license.rst and give the file a header like&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-Markdown&#34;&gt;License
=======

...
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Inside the index.rst look for&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-Markdown&#34;&gt;.. toctree::
    :maxdepth: 2
    :caption: Contents:
    license
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where we have added license to link the license file to the main documentation page (the name of the link will reflect the headings/subheadings in the file license.rst).&lt;/p&gt;
&lt;h2 id=&#34;cython-development&#34;&gt;Cython Development&lt;/h2&gt;
&lt;p&gt;I think the most effective cython tutorial is &lt;a href=&#34;https://cython.readthedocs.io/en/latest/src/userguide/wrapping_CPlusPlus.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this cython documentation example&lt;/a&gt;. You&amp;rsquo;ll eventually be introduced to the very basic example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from setuptools import setup

from Cython.Build import cythonize

setup(ext_modules=cythonize(&amp;quot;rect.pyx&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This example is good because it shows the essential features. However, if you have multiple c++ files that you want to compile together, you will need more. Eventually you&amp;rsquo;ll want to create more complicated objects to pass to cythonize/ext_modules. This will &lt;a href=&#34;https://docs.python.org/3/extending/building.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;introduce you to distutils&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The main change to have cython code is to add a build.py file. This file uses the python library distutils to link all the c++ files and call cython. I have an &lt;a href=&#34;https://github.com/andgoldschmidt/pyprotoclust/blob/master/build.py&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;example build.py on my Github&lt;/a&gt;. To get Poetry to use your build.py, you need to include &lt;code&gt;{build = &#39;build.py&#39;}&lt;/code&gt; under the &lt;code&gt;[tool.poetry]&lt;/code&gt; section in your pyproject.toml.&lt;/p&gt;
&lt;p&gt;For readthedocs, it seems that a wrapper around this build.py script is needed. A short setup.py script can be written to do this. You might want to look at additional tasks for some context on parts of this, but here&amp;rsquo;s an example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Wrapper over build.py for readthedocs
from distutils.core import setup
from build import build

global setup_kwargs

setup_kwargs = {}

build(setup_kwargs)
setup(**setup_kwargs)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another issue to address with readthedocs is making sure autodoc works for cython code. This fix is courtesy of &lt;a href=&#34;https://stackoverflow.com/questions/13238736&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://stackoverflow.com/questions/13238736&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;using-docker&#34;&gt;Using Docker&lt;/h2&gt;
&lt;p&gt;The goal of this section is to build and distribute a C++ shared package called example_package inside a Python wheel using poetry and auditwheel. For this, I followed: &lt;a href=&#34;https://github.com/riddell-stan/poetry-install-shared-lib-demo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/riddell-stan/poetry-install-shared-lib-demo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The wheel created using these instructions conforms to the manylinux2014 standard and should be usable on most Linux systems. This README also includes notes which may be of interest to developers seeking to understand how the &lt;code&gt;auditwheel repair&lt;/code&gt; command works. You&amp;rsquo;ll need to install &lt;a href=&#34;https://docs.docker.com/get-docker/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;docker&lt;/a&gt; (so we can use PyPA&amp;rsquo;s &lt;code&gt;manylinux2014&lt;/code&gt; build image).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CartPole</title>
      <link>https://andgoldschmidt.github.io/project/cartpole/</link>
      <pubDate>Mon, 09 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://andgoldschmidt.github.io/project/cartpole/</guid>
      <description>&lt;p&gt;In this &lt;a href=&#34;https://github.com/andgoldschmidt/cartpole&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;project on Github&lt;/a&gt; I coded up some tutorial concepts in control theory like observability, controllability, and the linear quadratic regulator using the example environment of a linear pendulum fixed to a cart. I also made fun Jupyter notebook movies to visualize the results.&lt;/p&gt;
&lt;p&gt;Also included under this project are the slides I did for a short class project covering reinforcement learning (RL) for CartPole from the OpenAI lab. It&amp;rsquo;s nice to contextualize model-free RL methods for control within a familiar environment where we have covered the control theory basics.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TODO: Turn this into a Google Colab&lt;/code&gt; &lt;a href=&#34;https://colab.research.google.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://colab.research.google.com/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://andgoldschmidt.github.io/admin/config.yml</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://andgoldschmidt.github.io/admin/config.yml</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
